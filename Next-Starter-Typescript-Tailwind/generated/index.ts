/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    get: operations["AppController_getHello"];
  };
  "/attachments/{typeId}": {
    get: operations["AttachmentsController_getAttachments"];
  };
  "/attachments/data": {
    post: operations["AttachmentsController_createAttachmentData"];
  };
  "/attachments/data/{id}": {
    delete: operations["AttachmentsController_removeAttachmentData"];
  };
  "/attachments/{id}": {
    put: operations["AttachmentsController_updateAttachmentData"];
  };
  "/attachments/url/{id}": {
    get: operations["AttachmentsController_getAttachment"];
  };
  "/users": {
    get: operations["UserController_fetchAllUsers"];
  };
  "/users/me": {
    get: operations["UserController_me"];
  };
  "/users/roles": {
    get: operations["UserController_fetchAllRoles"];
  };
  "/users/search": {
    get: operations["UserController_searchUser"];
  };
  "/users/{id}": {
    get: operations["UserController_getUserById"];
    delete: operations["UserController_removeUser"];
  };
  "/users/login": {
    post: operations["UserController_login"];
  };
  "/users/register": {
    post: operations["UserController_registerUser"];
  };
  "/users/forgotPassword": {
    post: operations["UserController_forgotPassword"];
  };
  "/users/verifyEmail": {
    post: operations["UserController_verifyEmail"];
  };
  "/users/resendVerificationEmail": {
    post: operations["UserController_resendVerificationEmail"];
  };
  "/users/verifyEmailAndSetPasswordInput": {
    post: operations["UserController_verifyEmailAndSetPassword"];
  };
  "/users/resetPassword": {
    post: operations["UserController_resetPassword"];
  };
  "/users/deactivateUser": {
    post: operations["UserController_deactivateUser"];
  };
  "/users/activateUser": {
    post: operations["UserController_activateUser"];
  };
  "/users/update/{id}": {
    put: operations["UserController_updateUser"];
  };
  "/users/updateRole/{id}": {
    put: operations["UserController_updateRole"];
  };
  "/users/updatePassword/{id}": {
    put: operations["UserController_updatePassword"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ResponsePayload: {
      status: number;
      error?: string;
      message: string;
      name?: string;
    };
    Attachment: {
      id: string;
      typeId?: string;
      description: string;
      key: string;
      url: string;
      createdAt: string;
      updatedAt: string;
    };
    PaginationPayload: {
      page: number;
      limit: number;
      totalCount: number;
      totalPages: number;
    };
    AttachmentsPayload: {
      response?: components["schemas"]["ResponsePayload"];
      attachments: components["schemas"]["Attachment"][];
      pagination?: components["schemas"]["PaginationPayload"];
    };
    CreateAttachmentInput: {
      typeId: string;
      description?: string;
      url?: string;
    };
    AttachmentPayload: {
      response?: components["schemas"]["ResponsePayload"];
      attachment?: components["schemas"]["Attachment"];
    };
    UpdateAttachmentInput: {
      typeId?: string;
      description?: string;
      url?: string;
      key?: string;
    };
    GetAttachmentPayload: {
      response?: components["schemas"]["ResponsePayload"];
      preSignedUrl?: string;
    };
    Role: {
      id: string;
      /**
       * @default admin
       * @enum {string}
       */
      role: "super-admin" | "admin" | "user";
      users: unknown[][];
      createdAt: string;
      updatedAt: string;
    };
    User: {
      id: string;
      firstName: string;
      lastName: string;
      /**
       * @default 0
       * @enum {number}
       */
      status: 0 | 1;
      emailVerified?: boolean;
      email: string;
      token?: string;
      roles: components["schemas"]["Role"][];
      createdAt: string;
      updatedAt: string;
    };
    UsersPayload: {
      users: components["schemas"]["User"][];
      pagination?: components["schemas"]["PaginationPayload"];
      response?: components["schemas"]["ResponsePayload"];
    };
    UserPayload: {
      user: components["schemas"]["User"];
      response: components["schemas"]["ResponsePayload"];
    };
    RolesPayload: {
      roles: components["schemas"]["Role"][];
      response?: components["schemas"]["ResponsePayload"];
    };
    LoginUserInput: {
      email: string;
      password: string;
    };
    AccessUserPayload: {
      access_token?: string;
      roles: components["schemas"]["Role"][];
      response?: components["schemas"]["ResponsePayload"];
    };
    RegisterUserInput: {
      firstName?: string;
      lastName?: string;
      password?: string;
      email: string;
      /**
       * @default user
       * @enum {string}
       */
      roleType?: "super-admin" | "admin" | "user";
    };
    ForgotPasswordInput: {
      email: string;
    };
    ForgotPasswordPayload: {
      response?: components["schemas"]["ResponsePayload"];
    };
    VerifyEmailInput: {
      token: string;
    };
    ResendVerificationEmail: {
      email?: string;
    };
    VerifyUserAndUpdatePasswordInput: {
      token: string;
      password: string;
    };
    ResetPasswordInput: {
      password: string;
      token: string;
    };
    UserIdInput: {
      userId: string;
    };
    UpdateUserInput: {
      firstName?: string;
      lastName?: string;
      email?: string;
      id: string;
      emailVerified?: boolean;
    };
    UpdateRoleInput: {
      id: string;
      roles: ("super-admin" | "admin" | "user")[];
    };
    UpdatePasswordInput: {
      id: string;
      newPassword: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_getHello: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  AttachmentsController_getAttachments: {
    parameters: {
      path: {
        typeId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentsPayload"];
        };
      };
    };
  };
  AttachmentsController_createAttachmentData: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAttachmentInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentPayload"];
        };
      };
    };
  };
  AttachmentsController_removeAttachmentData: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentPayload"];
        };
      };
    };
  };
  AttachmentsController_updateAttachmentData: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAttachmentInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentPayload"];
        };
      };
    };
  };
  AttachmentsController_getAttachment: {
    parameters: {
      path: {
        getMediaId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetAttachmentPayload"];
        };
      };
    };
  };
  UserController_fetchAllUsers: {
    parameters: {
      query: {
        /** @description Format should be year-month-day time i.e. 2023-05-04 00:00 */
        from?: string;
        /** @description Format should be year-month-day time i.e. 2023-05-04 23:59 */
        to?: string;
        status?: 0 | 1;
        /**
         * @description Array of user roles
         * @example [
         *   "admin"
         * ]
         */
        roles?: unknown[];
        searchQuery?: string;
        page: number;
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UsersPayload"];
        };
      };
    };
  };
  UserController_me: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_fetchAllRoles: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RolesPayload"];
        };
      };
    };
  };
  UserController_searchUser: {
    parameters: {
      query: {
        searchTerm: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UsersPayload"];
        };
      };
    };
  };
  UserController_getUserById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_removeUser: {
    parameters: {
      query: {
        id: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginUserInput"];
      };
    };
    responses: {
      /** @description User found */
      200: {
        content: {
          "application/json": components["schemas"]["AccessUserPayload"];
        };
      };
    };
  };
  UserController_registerUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterUserInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_forgotPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForgotPasswordInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ForgotPasswordPayload"];
        };
      };
    };
  };
  UserController_verifyEmail: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyEmailInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_resendVerificationEmail: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResendVerificationEmail"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ResendVerificationEmail"];
        };
      };
    };
  };
  UserController_verifyEmailAndSetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyUserAndUpdatePasswordInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_resetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_deactivateUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserIdInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_activateUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserIdInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_updateUser: {
    parameters: {
      query: {
        id: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_updateRole: {
    parameters: {
      query: {
        id: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRoleInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
  UserController_updatePassword: {
    parameters: {
      query: {
        id: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePasswordInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayload"];
        };
      };
    };
  };
}
